# Copyright (C) 2015 Assured Information Security, Inc.
# Author: Kyle J. Temkin <temkink@ainfosec.com>
#
# Released under the MIT license (see COPYING.MIT for the terms)

SUMMARY = "A root filesystem for a live Xen installation environment"
DESCRIPTION = " \
    The core root filesystem (rootfs) for the MobileXT installation \
    environment, which should be able to install a simple or complex \
    Xen setup onto a target system -- including the MobileXT platform. \
\
    This is usually packaged into a full install image, which includes \
    the filesystem images to be installed. As an example, see \
    xen-base-installer-image, which wraps this rootfs in a bootable ISO. \
"
AUTHOR = "Kyle J. Temkin <temkink@ainfosec.com>"

LICENSE = "MIT"
LIC_FILES_CHKSUM = "file://${COREBASE}/LICENSE;md5=3f40d7994397109285ec7b81fdeb3b58"

#Mark that this package can be used to provide a simple installer rootfs.
PROVIDES += "virtual/installer-root-image"

#Include several hardware inspection utilities, which are useful to have in an installer.
HW_INSPECTION_UTILITIES = "\
    usbutils \
    pciutils \
    i2c-tools \
"

# Select the components to be included in the installer's live environment...
IMAGE_INSTALL += "\
    packagegroup-core-boot \
    mobilext-installer \ 
    coreutils \
    ${HW_INSPECTION_UTILITIES} \
"

#Configure the core packages that will set up this system.
IMAGE_DEV_MANAGER   = "udev"
IMAGE_INIT_MANAGER  = "systemd"
IMAGE_INITSCRIPTS   = " "
IMAGE_LOGIN_MANAGER = "busybox shadow"

#... and ensure the requisite images are built before we try to use it.
do_rootfs[depends] += "\
    virtual/boot-partition-image:do_bootimg \
    virtual/dom0-image:do_rootfs \
    virtual/bootloader:do_deploy \
"

# And ensure that this builds an ext4 image, as that's what our install environment
# requies.
IMAGE_FSTYPES += "ext4"

# Mark this image as being one that's used in read-only contexts.
# (e.g. booted from a live CD).
IMAGE_FEATURES += "read-only-rootfs"

#Set the target hostname to indicate that one is running inside
#the installer. This is useful in development shells.
TARGET_HOSTNAME = "mobilext-installer"

#Specify the pretty name for the image.
export IMAGE_BASENAME = "mobilext-installer"

inherit override-hostname
inherit image

#Specify the names of the partition files that should be installed.
#These will be copied into an installer-accesible location.
BOOT_PARTITION_ROOTFS ?= "xen-base-boot-${MACHINE}.hddimg"
DOM0_PARTITION_ROOTFS ?= "xen-base-dom0-${MACHINE}.ext4"

#Specify the file that will be produced by the bootloader.
BOOTLOADER_BINARY ?= "bootloader-${MACHINE}.bin"

#The path to the directory on the target image where the installation assets
#(e.g. the rootfs to be placed on the target)
INSTALL_ASSETS_PATH = "${IMAGE_ROOTFS}/install/images"

#Specify the file into which we should write configuration data.
INSTALL_CONFIG = "${IMAGE_ROOTFS}/install/setup.conf.sh"

#Assume defaults regarding the installer, if none were provided.
MACHINE_NAME               ?= "${MACHINE}"
INSTALLED_PRODUCT          ?= "${DISTRO}"
INSTALLED_VERSION          ?= "${DISTRO_VERSION}"

#If no other information has  been provided, assume we'll install
#to /dev/sda.
DEFAULT_INSTALLATION_DRIVE ?= "/dev/sda"

#This specifies the partition prefix. Some filesystems (e.g. SD cards)
#place a letter between the base device name and the partition number.
#For those devices, this prefix should be set to that letter (e.g. 'p').
DEFAULT_PARTITION_PREFIX   ?= ""

#
# Configure the installer for the target machine.
#
generate_installer_configuration() {
    #TODO: Fail if DEFAULT_INSTALLATION_DRIVE is not set.

    echo "#Automatically generated by the ${PN} package." > ${INSTALL_CONFIG}
    echo "export PRODUCT=\"${INSTALLED_PRODUCT}\"" >> ${INSTALL_CONFIG}
    echo "export PLATFORM=\"${MACHINE_NAME}\"" >> ${INSTALL_CONFIG}
    echo "export VERSION=\"${DISTRO_VERSION}\"" >> ${INSTALL_CONFIG}
    echo >> ${INSTALL_CONFIG}
    echo "export TARGET_DRIVE=\"${DEFAULT_INSTALLATION_DRIVE}\"" >> ${INSTALL_CONFIG}
    echo >> ${INSTALL_CONFIG}
    echo "export BOOT_PARTITION_IMAGE=\"${BOOT_PARTITION_ROOTFS}\"" >> ${INSTALL_CONFIG}
    echo "export DOM0_PARTITION_IMAGE=\"${DOM0_PARTITION_ROOTFS}\"" >> ${INSTALL_CONFIG}
    echo "export BOOTLOADER_BINARY=\"${BOOTLOADER_BINARY}\"" >> ${INSTALL_CONFIG}
    echo "export INSTALL_LOG=\"/tmp/installer.log\"" >> ${INSTALL_CONFIG}

}
IMAGE_PREPROCESS_COMMAND += "generate_installer_configuration;"


#
# Append each of the pieces that should be included for use by the installer.
#
add_installer_images() {
    install -d ${INSTALL_ASSETS_PATH}

    #Include the bootloader binary...
    install -m 0644 ${DEPLOY_DIR_IMAGE}/${BOOTLOADER_BINARY} ${INSTALL_ASSETS_PATH}/${BOOTLOADER_BINARY}

    #... the boot partition.
    install -m 0644 ${DEPLOY_DIR_IMAGE}/${BOOT_PARTITION_ROOTFS} ${INSTALL_ASSETS_PATH}/${BOOT_PARTITION_ROOTFS}

    #... and the compressed dom0 rootfs.
    install -m 0644 ${DEPLOY_DIR_IMAGE}/${DOM0_PARTITION_ROOTFS} ${INSTALL_ASSETS_PATH}/${DOM0_PARTITION_ROOTFS}

}
IMAGE_PREPROCESS_COMMAND += "add_installer_images;"


#
# Configure systemd so the installer will run automatically.
#
configure_image_for_installer() {

    #Enable automatic root login on all gettys.
    #Unfortunately, this is currently the recommended way to do this-- the only other option is to
    #strip out authentication altogether by an equivalent modification of PAM's configuration.
    sed -i "s/agetty --noclear/agetty --autologin root --noclear/" ${IMAGE_ROOTFS}${systemd_unitdir}/system/getty@.service

    #... and configure our shell to automatically start the installer on the first tty...
    echo 'cd /install/' >> ${IMAGE_ROOTFS}/etc/profile
    echo '[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec ./install.sh' >> ${IMAGE_ROOTFS}/etc/profile

    #... and display the raw installer output on the second tty.
    echo '[[ -z $DISPLAY && $XDG_VTNR -eq 2 ]] && exec ./follow-install-log.sh' >> ${IMAGE_ROOTFS}/etc/profile

}
IMAGE_PREPROCESS_COMMAND += "configure_image_for_installer;"


#
# Fix /var/run for live systems.
#
fix_run_on_livecd() {
    #Certain Angstrom distributions accidentally create a /var/run folder, and /then/
    #attempt to run "ln -s /run /var/run". This creates /var/run/run, and run isn't writable.

    #This quirk fixes this.
    rm -rf ${IMAGE_ROOTFS}/var/run;
    ln -s /run ${IMAGE_ROOTFS}/var/run;

    #TEST: Remove the rootfs entry from our fstab, as it will be mounetd for us by
    #the livecd initscripts. This should remove a benign FAILED message.
    sed -i "/rootfs/ d" ${IMAGE_ROOTFS}/etc/fstab


}
IMAGE_PREPROCESS_COMMAND += "fix_run_on_livecd;"


#Create simple, toolchain-independent symlinks to the boot image that can be consumed by other images.
do_rootfs_append() {
    for IMAGE_TYPE in ${IMAGE_FSTYPES}; do

        #Compute the path the image will have, if it's been created...
        SOURCE_IMAGE=${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.${IMAGE_TYPE}

        #... and if it has been created, create our symlink.
        if [[ -e $SOURCE_IMAGE ]]; then
            ln -sf ${SOURCE_IMAGE} ${DEPLOY_DIR_IMAGE}/installer-${MACHINE}.${IMAGE_TYPE}
        fi

    done
}
